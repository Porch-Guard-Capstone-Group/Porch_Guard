import express from 'express';
import { https } from 'firebase-functions';
import glob from 'glob';
import { parse } from 'path';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var RequestType;

(function (RequestType) {
  RequestType["GET"] = "GET";
  RequestType["POST"] = "POST";
  RequestType["PUT"] = "PUT";
  RequestType["DELETE"] = "DELETE";
  RequestType["PATCH"] = "PATCH";
})(RequestType || (RequestType = {}));

var Endpoint = function Endpoint(name, requestType, handler) {
  this.name = name;
  this.requestType = requestType;
  this.handler = handler;

  if (!handler) {
    throw new Error('Please provide a endpoint request handler.');
  }

  this.name = name;
  this.handler = handler;
  this.requestType = requestType;
};
var Get = /*#__PURE__*/function (_Endpoint) {
  _inheritsLoose(Get, _Endpoint);

  function Get(handler) {
    return _Endpoint.call(this, undefined, RequestType.GET, handler) || this;
  }

  return Get;
}(Endpoint);
var Post = /*#__PURE__*/function (_Endpoint2) {
  _inheritsLoose(Post, _Endpoint2);

  function Post(handler) {
    return _Endpoint2.call(this, undefined, RequestType.POST, handler) || this;
  }

  return Post;
}(Endpoint);
var Put = /*#__PURE__*/function (_Endpoint3) {
  _inheritsLoose(Put, _Endpoint3);

  function Put(handler) {
    return _Endpoint3.call(this, undefined, RequestType.PUT, handler) || this;
  }

  return Put;
}(Endpoint);
var Delete = /*#__PURE__*/function (_Endpoint4) {
  _inheritsLoose(Delete, _Endpoint4);

  function Delete(handler) {
    return _Endpoint4.call(this, undefined, RequestType.DELETE, handler) || this;
  }

  return Delete;
}(Endpoint);
var Patch = /*#__PURE__*/function (_Endpoint5) {
  _inheritsLoose(Patch, _Endpoint5);

  function Patch(handler) {
    return _Endpoint5.call(this, undefined, RequestType.PATCH, handler) || this;
  }

  return Patch;
}(Endpoint);

var _console = console,
    log = _console.log;
var FunctionParser = /*#__PURE__*/function () {
  function FunctionParser(rootPath, exports, buildReactive, buildEndpoints, groupByFolder) {
    if (buildReactive === void 0) {
      buildReactive = true;
    }

    if (buildEndpoints === void 0) {
      buildEndpoints = true;
    }

    if (groupByFolder === void 0) {
      groupByFolder = true;
    }

    if (!rootPath) {
      throw new Error('rootPath is required to find the functions.');
    }

    this.rootPath = rootPath;
    this.exports = exports;

    if (buildReactive) {
      this.buildReactiveFunctions(groupByFolder);
    }

    if (buildEndpoints) {
      this.buildRestfulApi(groupByFolder);
    }
  }

  var _proto = FunctionParser.prototype;

  _proto.buildReactiveFunctions = function buildReactiveFunctions(groupByFolder) {
    var _this = this;

    log('Reactive Functions - Building...');
    var functionFiles = glob.sync(this.rootPath + "/**/*.function.js", {
      cwd: this.rootPath,
      ignore: './node_modules/**'
    });
    functionFiles.forEach(function (file) {
      var filePath = parse(file);
      var directories = filePath.dir.split('/');
      var groupName = groupByFolder ? directories[directories.length - 2] || '' : directories[directories.length - 1] || '';
      var functionName = filePath.name.replace('.function', '');

      if (!process.env.FUNCTION_NAME || process.env.FUNCTION_NAME === functionName) {
        if (!_this.exports[groupName]) _this.exports[groupName] = {};
        log("Reactive Functions - Added " + groupName + "/" + functionName);
        _this.exports[groupName] = _extends({}, _this.exports[groupName], require(file));
      }
    });
    log('Reactive Functions - Built');
  };

  _proto.buildRestfulApi = function buildRestfulApi(groupByFolder) {
    var _this2 = this;

    log('Restful Endpoints - Building...');
    var apiFiles = glob.sync(this.rootPath + "/**/*.endpoint.js", {
      cwd: this.rootPath,
      ignore: './node_modules/**'
    });
    var app = express();
    var groupRouters = new Map();
    apiFiles.forEach(function (file) {
      var filePath = parse(file);
      var directories = filePath.dir.split('/');
      var groupName = groupByFolder ? directories[directories.length - 2] || '' : directories[directories.length - 1] || '';
      var router = groupRouters.get(groupName);

      if (!router) {
        router = express.Router();
        groupRouters.set(groupName, router);
      }

      try {
        _this2.buildEndpoint(file, groupName, router);
      } catch (e) {
        throw new Error("Restful Endpoints - Failed to add the endpoint defined in " + file + " to the " + groupName + " Api.");
      }

      app.use('/', router);
      _this2.exports[groupName] = _extends({}, _this2.exports[groupName], {
        api: https.onRequest(app)
      });
    });
    log('Restful Endpoints - Built');
  };

  _proto.buildEndpoint = function buildEndpoint(file, groupName, router) {
    var filePath = parse(file);

    var endpoint = require(file)["default"];

    var name = endpoint.name || filePath.name.replace('.endpoint', '');
    var handler = endpoint.handler;

    switch (endpoint.requestType) {
      case RequestType.GET:
        router.get("/" + name, handler);
        break;

      case RequestType.POST:
        router.post("/" + name, handler);
        break;

      case RequestType.PUT:
        router.put("/" + name, handler);
        break;

      case RequestType.DELETE:
        router["delete"]("/" + name, handler);
        break;

      case RequestType.PATCH:
        router.patch("/" + name, handler);
        break;

      default:
        throw new Error("A unsupported RequestType was defined for a Endpoint.\n\n          Please make sure that the Endpoint file exports a RequestType\n          using the constants in src/system/constants/requests.ts.\n\n          **This value is required to add the Endpoint to the API**");
    }

    log("Restful Endpoints - Added " + groupName + "/" + endpoint.requestType + ":" + name);
  };

  return FunctionParser;
}();

export { Delete, Endpoint, FunctionParser, Get, Patch, Post, Put, RequestType };
//# sourceMappingURL=firebase-backend.esm.js.map
